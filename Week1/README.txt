===============================================================================================================================================
# week 1
# 1차업무
===============================================================================================================================================
[주제]
 Git을 활용한코드관리및픽셀단위이미지처리실습

[요청내용] 
1차과제에서는Git을활용한코드관리의기본개념을익히고, 픽셀단위이미지처리기술을실습해야합니다. 이를위해다음과같은업무를
수행해주세요.

 1. Git을 활용한코드저장소구성및실습

• GitHub 또는GitLab에개인저장소를생성하고로컬환경과연동합니다.
 • git init, git clone 등의 명령어를 활용하여 Git 환경을설정합니다.
 • 새로운브랜치를생성하고(git branch feature/image-processing), 코드 변경 사항을관리합니다.
 2.픽셀단위이미지처리코드작성
• OpenCV를사용하여제공된이미지를로드하고픽셀값을분석합니다.
 • 특정색상의픽셀을감지하고필터링하는기능을구현합니다.
 • cv2.imread(), cv2.cvtColor(), cv2.threshold() 등의 함수를 사용합니다.
 3.Git을 활용한코드관리및제출
• git commit -m "Initial commit" 등을 활용하여 코드 변경 사항을관리합니다.
 • git push origin feature/image-processing 으로 원격 저장소에 업로드합니다.
 • Pull Request(PR)를 생성하고코드리뷰및Merge 과정을진행합니다.

[추가요청]

기본문제
Hugging Face 데이터셋에서이미지를가져와AI 학습을위한전처리를수행하세요.(ex: https://huggingface.co/datasets/ethz/food101)

크기조정(224×224)
색상변환(Grayscale & Normalize 적용)
노이즈제거(Blur 필터적용)
데이터증강(좌우반전, 회전, 색상변화)
심화문제
1. 이상치를탐지하여필터링하는알고리즘을추가하세요.
2. 너무어두운이미지제거(평균밝기기준)
3. 객체크기가너무작은이미지제거

 1. image_processing.py ==> 이미지를 로드한 후 지정된 영역의 색상을 감지해 출력함.

 2. basic.py ==> food101 이미지 하나를 불러와 리사이징, 흑백화, 블러처리, 데이터 증강(좌우 변환)을 한 결과값을 얻음.

 3. advanced.py ==> food101 
 
=======================심화 알고리즘=======================

함수명 : is_too_dark(image, brightness_threshold=30)

역할: 이미지가 너무 어두운지 판단해서 필터링할지 결정합니다.

동작 방식: 이미지를 흑백(Grayscale) 으로 변환합니다.

픽셀 값들의 평균 밝기(mean_brightness)를 계산합니다.

이 값이 brightness_threshold보다 작으면 -> 어두운 이미지로 간주해서 True 반환 (필터링 대상)

예시:
평균 밝기 25 < 임계값 30 -> True (너무 어두움 -> 제거)

평균 밝기 60 > 30 -> False (적당히 밝음 -> 유지)

========================================================

함수명 : is_too_small_object(image, min_object_area=100)

역할: 이미지 안에 충분히 큰 객체가 있는지를 판단해서, 없으면 필터링합니다.

동작 방식: PIL 이미지를 OpenCV 형식으로 변환 (RGB -> BGR -> GRAY).

Canny Edge Detection을 사용해 윤곽선(edge) 을 검출.

cv2.findContours()로 객체의 외곽선(contour) 들을 찾습니다.

각 contour의 면적을 계산해서, 하나라도 min_object_area 이상이면 -> False 반환 (필터 안 함)

전부 너무 작거나 아무것도 없으면 -> True 반환 (필터링 대상)

예시:
면적 150짜리 contour 있음 -> False (충분히 큰 객체 -> 유지)

모든 contour 면적 < 100 -> True (작은 것들만 있음 -> 제거)

1번 or 2번에 해당되면 필터링 작업

https://velog.io/@mdo0421/1%EC%A3%BC%EC%B0%A8ComentoCV 1주차 벨로그 정리

https://velog.io/@mdo0421/1%EC%A3%BC%EC%B0%A8ComentoCV%EB%B8%8C%EB%9E%9C%EC%B9%98-%EB%B0%8F-PRPull-Request 1주차 업무 피드백 적용 정리
===============================================================================================================================================